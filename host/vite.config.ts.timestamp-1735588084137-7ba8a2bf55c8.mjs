// vite.config.ts
import { defineConfig } from 'file:///Users/damianpumar/Projects/Talks/react-microfrontend/host/node_modules/.pnpm/vite@5.2.10_@types+node@18.19.42/node_modules/vite/dist/node/index.js';
import { federation } from 'file:///Users/damianpumar/Projects/Talks/react-microfrontend/host/node_modules/.pnpm/@module-federation+vite@1.1.9_rollup@4.19.1/node_modules/@module-federation/vite/lib/index.cjs';
import react from 'file:///Users/damianpumar/Projects/Talks/react-microfrontend/host/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.2.10_@types+node@18.19.42_/node_modules/@vitejs/plugin-react/dist/index.mjs';

// package.json
var dependencies = {
	react: '^18.3.1',
	'react-dom': '^18.3.1',
	'react-router-dom': '^6.28.1',
	'react-microfrontend-store': 'link:../store',
};

// ../vite.config.common.js
import { loadEnv } from 'file:///Users/damianpumar/Projects/Talks/react-microfrontend/node_modules/.pnpm/vite@5.2.10/node_modules/vite/dist/node/index.js';
import path from 'path';
import { writeFileSync } from 'fs';
var loadEnvs = (mode) => {
	const currentWorkingDir = process.cwd();
	const parentDir = path.dirname(currentWorkingDir);
	const globalEnv = loadEnv(mode, parentDir);
	const localEnv = loadEnv(mode, process.cwd());
	return {
		...globalEnv,
		...localEnv,
	};
};
var getProcessVariable = (env) => {
	const project = process.cwd().split('/').pop();
	const url = env[`VITE_${project.toUpperCase()}`];
	const port = url.split(':').pop();
	return {
		port,
		url,
	};
};
var defineCommonConfig = (mode) => {
	const env = loadEnvs(mode);
	const { port, url } = getProcessVariable(env);
	const base = {
		resolve: {
			alias: {
				src: '/src',
			},
		},
		server: {
			strictPort: true,
			port,
		},
		preview: {
			strictPort: true,
			port,
		},
		base: url,
		build: {
			target: 'chrome89',
		},
	};
	const remotes = {
		header: {
			type: 'module',
			name: 'header',
			entry: `${env.VITE_HEADER}/remoteEntry.js`,
			entryGlobalName: 'header',
			shareScope: 'default',
		},
		store: {
			type: 'module',
			name: 'store',
			entry: `${env.VITE_STORE}/remoteEntry.js`,
			entryGlobalName: 'remote',
			shareScope: 'default',
		},
		cookie: {
			type: 'module',
			name: 'cookie',
			entry: `${env.VITE_COOKIE}/remoteEntry.js`,
			entryGlobalName: 'remote',
			shareScope: 'default',
		},
		front: {
			type: 'module',
			name: 'front',
			entry: `${env.VITE_FRONT}/remoteEntry.js`,
			entryGlobalName: 'remote',
			shareScope: 'default',
		},
		user: {
			type: 'module',
			name: 'user',
			entry: `${env.VITE_USER}/remoteEntry.js`,
			entryGlobalName: 'remote',
			shareScope: 'default',
		},
	};
	const plugins = [
		{
			name: 'generate-environment',
			options: function () {
				writeFileSync('./src/environment.ts', `export default ${JSON.stringify(env, null, 2)};`);
			},
		},
	];
	return {
		selfEnv: env,
		base,
		remotes,
		plugins,
	};
};

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => {
	const { remotes, base } = defineCommonConfig(mode);
	return {
		...base,
		plugins: [
			federation({
				filename: 'remoteEntry.js',
				name: 'host',
				remotes: {
					store: remotes.store,
					header: remotes.header,
					front: remotes.front,
					user: remotes.user,
				},
				shared: {
					react: {
						requiredVersion: dependencies.react,
						singleton: true,
					},
					'react-dom': {
						requiredVersion: dependencies['react-dom'],
						singleton: true,
					},
					'react-router-dom': {
						requiredVersion: dependencies['react-router-dom'],
						singleton: true,
					},
				},
			}),
			react(),
		],
	};
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
